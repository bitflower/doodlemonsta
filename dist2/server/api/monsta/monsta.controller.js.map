{"version":3,"sources":["api/monsta/monsta.controller.js"],"names":[],"mappings":"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","file":"api/monsta/monsta.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/monstas              ->  index\n * POST    /api/monstas              ->  create\n * GET     /api/monstas/:id          ->  show\n * PUT     /api/monstas/:id          ->  update\n * DELETE  /api/monstas/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Monsta from './monsta.model';\n\nfunction respondWithResult(res, statusCode) {\n    statusCode = statusCode || 200;\n    return function(entity) {\n        if (entity) {\n\n            // Populate users\n            // Workaround, solange noch buggy !!\n            Monsta\n                .deepPopulate(entity, 'head.user stomach.user legs.user', function(err, _entity) {\n\n                    // \"De-mongoosify\" object\n                    var clone = _entity.toObject({ virtuals: true })\n\n                    if (clone.head.user) {\n                        _.set(clone, 'head.user', clone.head.user.profile);\n                    }\n                    if (clone.stomach.user) {\n                        _.set(clone, 'stomach.user', clone.stomach.user.profile);\n                    }\n                    if (clone.legs.user) {\n                        _.set(clone, 'legs.user', clone.legs.user.profile);\n                    }\n\n                    res.status(statusCode).json(clone);\n                });\n\n            // res.status(statusCode).json(entity);\n        }\n    };\n}\n\n// function populate(entities, path) {\n//     Monsta.populate(entities, {\n//             path: path,\n//             model: 'User'\n//         },\n//         function(err, docs) {\n//             if (err) return callback(err);\n//             // console.log(cars); // This object should now be populated accordingly.\n//         });\n// }\n\nfunction saveUpdates(updates) {\n    return function(entity) {\n        var updated = _.merge(entity, updates);\n        return updated.saveAsync()\n            .spread(updated => {\n                return updated;\n            });\n    };\n}\n\nfunction removeEntity(res) {\n    return function(entity) {\n        if (entity) {\n            return entity.removeAsync()\n                .then(() => {\n                    res.status(204).end();\n                });\n        }\n    };\n}\n\nfunction handleEntityNotFound(res) {\n    return function(entity) {\n        if (!entity) {\n            res.status(404).end();\n            return null;\n        }\n        return entity;\n    };\n}\n\nfunction handleError(res, statusCode) {\n    statusCode = statusCode || 500;\n    return function(err) {\n        res.status(statusCode).send(err);\n    };\n}\n\n// Gets a list of Monstas\nexport function index(req, res) {\n    Monsta.findAsync()\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Gets a single Monsta from the DB\nexport function show(req, res) {\n    Monsta\n        .findByIdAsync(req.params.id)\n        .then(handleEntityNotFound(res))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Creates a new Monsta in the DB\nexport function create(req, res) {\n    Monsta\n        .createAsync(req.body)\n        .then(respondWithResult(res, 201))\n        .catch(handleError(res));\n}\n\n// Updates an existing Monsta in the DB\nexport function update(req, res) {\n    if (req.body._id) {\n        delete req.body._id;\n    }\n    Monsta.findByIdAsync(req.params.id)\n        .then(handleEntityNotFound(res))\n        .then(saveUpdates(req.body))\n        .then(respondWithResult(res))\n        .catch(handleError(res));\n}\n\n// Deletes a Monsta from the DB\nexport function destroy(req, res) {\n    Monsta.findByIdAsync(req.params.id)\n        .then(handleEntityNotFound(res))\n        .then(removeEntity(res))\n        .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}