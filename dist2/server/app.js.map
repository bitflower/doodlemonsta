{"version":3,"sources":["app.js"],"names":[],"mappings":";;;;AAIA,YAAY,CAAC;;;;uBAEO,SAAS;;;;wBACR,UAAU;;;;iCAEZ,sBAAsB;;;;oBACxB,MAAM;;;;AAFvB,sBAAS,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAIvC,IAAI,aAAa,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AACvD,IAAI,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;;AAGxC,sBAAS,OAAO,CAAC,+BAAO,KAAK,CAAC,GAAG,EAAE,+BAAO,KAAK,CAAC,OAAO,CAAC,CAAC;AACzD,sBAAS,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE;AAC1C,WAAO,CAAC,KAAK,CAAC,4BAA4B,GAAG,GAAG,CAAC,CAAC;AAClD,WAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CACpB,CAAC,CAAC;;;AAGH,aAAa,CAAC,UAAU,CAAC,sBAAS,UAAU,CAAC,CAAC;;;AAG9C,IAAI,+BAAO,MAAM,EAAE;AAAE,WAAO,CAAC,eAAe,CAAC,CAAC;CAAE;;;AAGhD,IAAI,GAAG,GAAG,2BAAS,CAAC;AACpB,IAAI,MAAM,GAAG,kBAAK,YAAY,CAAC,GAAG,CAAC,CAAC;;;AAGpC,IAAI,gBAAgB,GAAG,SAAnB,gBAAgB,CAAY,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5C,OAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;AAC/C,OAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,6GAA6G,CAAC,CAAC;AAC1J,OAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,iCAAiC,CAAC,CAAC;AAC9E,QAAI,EAAE,CAAC;;;;CAKV,CAAC;AACF,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;;;AAG1B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC;AACpB,SAAK,EAAE,KAAK;CACf,CAAC,CAAC,CAAA;;;AAGH,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;AACxC,eAAW,EAAE,+BAAO,GAAG,KAAK,YAAY;AACxC,QAAI,EAAE,mBAAmB;CAC5B,CAAC,CAAC;AACH,OAAO,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,CAAC;AACvC,OAAO,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC;AACjC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;;;AAGzB,SAAS,WAAW,GAAG;AACnB,OAAG,CAAC,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,+BAAO,IAAI,EAAE,+BAAO,EAAE,EAAE,YAAW;AACpE,eAAO,CAAC,GAAG,CAAC,4CAA4C,EAAE,+BAAO,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;KAC1F,CAAC,CAAC;CACN;;AAED,YAAY,CAAC,WAAW,CAAC,CAAC;;;AAG1B,OAAO,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport http from 'http';\n\nvar autoIncrement = require('mongoose-auto-increment');\nvar bodyParser = require('body-parser');\n\n// Connect to MongoDB\nmongoose.connect(config.mongo.uri, config.mongo.options);\nmongoose.connection.on('error', function(err) {\n    console.error('MongoDB connection error: ' + err);\n    process.exit(-1);\n});\n\n// Init Autoincrement\nautoIncrement.initialize(mongoose.connection);\n\n// Populate databases with sample data\nif (config.seedDB) { require('./config/seed'); }\n\n// Setup server\nvar app = express();\nvar server = http.createServer(app);\n\n// CORS\nvar allowCrossDomain = function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Content-Length, Access-Control-Allow-Headers, Authorization\");\n    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');\n    next();\n\n    // res.header(\"Access-Control-Max-Age\", \"3600\");\n    // res.header(\"Access-Control-Allow-Headers\", \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\");\n\n};\napp.use(allowCrossDomain);\n\n// BODY PARSER\napp.use(bodyParser.json({\n    limit: '2mb'\n}))\n\n// Socket IO\nvar socketio = require('socket.io')(server, {\n    serveClient: config.env !== 'production',\n    path: '/socket.io-client'\n});\nrequire('./config/socketio')(socketio);\nrequire('./config/express')(app);\nrequire('./routes')(app);\n\n// Start server\nfunction startServer() {\n    app.angularFullstack = server.listen(config.port, config.ip, function() {\n        console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n    });\n}\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"],"sourceRoot":"/source/"}