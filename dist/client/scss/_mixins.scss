@mixin margins() {
    // Margins
    &.no-top-margin {
        margin-top: 0;
    }
    &.no-bottom-margin {
        margin-bottom: 0;
    }
    &.no-margin {
        margin-bottom: 0;
        margin-top: 0;
    }
    &.medium-margin {
        @include breakpoint($from-1024) {
            margin-top: 25px;
            margin-bottom: 25px;
        }
        @include breakpoint($from-800) {
            margin-top: 17px;
            margin-bottom: 17px;
        }
    }
    &.medium-top-margin {
        @include breakpoint($from-1024) {
            margin-top: 25px;
        }
        @include breakpoint($from-800) {
            margin-top: 17px;
        }
    }
    &.medium-bottom-margin {
        @include breakpoint($from-1024) {
            margin-bottom: 25px;
        }
        @include breakpoint($from-800) {
            margin-bottom: 17px;
        }
    }
    &.large-margin {
        @include breakpoint($from-1024) {
            margin-top: 50px;
            margin-bottom: 50px;
        }
        @include breakpoint($from-800) {
            margin-top: 30px;
            margin-bottom: 30px;
        }
    }
    &.large-top-margin {
        @include breakpoint($from-1024) {
            margin-top: 50px;
        }
        @include breakpoint($from-800) {
            margin-top: 30px;
        }
    }
    &.large-bottom-margin {
        @include breakpoint($from-1024) {
            margin-bottom: 50px;
        }
        @include breakpoint($from-800) {
            margin-bottom: 30px;
        }
    }
}

/// Function to generate long shadows (because flat is so has-been).
/// Property-agnostic: works for both `box-shadow` and `text-shadow`.
/// `cos` and `sin` might need to be polyfilled if Compass or any 
/// equivalent such as SassyMath is not in use.
///
/// @author Hugo Giraudel
///
/// @link https://unindented.org/articles/trigonometry-in-sass/ Pure Sass `cos` and `sin`
///
/// @param {Direction} $direction
///     Shadow's direction (angle or keyword)
/// @param {Length} $length
///     Shadow's length
/// @param {Color} $color
///     Shadow's color
/// @param {Bool | Color} $fade [false]
///     Whether or not shadow should fade: 
///     - `false` means no fading, shadow is `$color`
///     - `true`  means fading from `$color` to transparent
///     - a color means fading from `$color` to `$fade`
/// @param {Number} $shadow-count [100]
///     Number of computed shadows
///
/// @return {List} - List of shadows
///
/// @require {function} Compass/helpers/math/cos
///     http://compass-style.org/reference/compass/helpers/math/#cos
/// @require {function} Compass/helpers/math/sin
///     http://compass-style.org/reference/compass/helpers/math/#sin
///
/// @example scss - Usage
/// .foo {
///   text-shadow: long-shadow(42deg, 1em, #16a085);
/// }
/// .bar {
///   box-shadow: long-shadow(to top left, 150px, hotpink, tomato);
/// }
@function sin($angle) {
    $sin: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
    }
    @return $sin;
}

@function cos($angle) {
    $cos: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }
    @return $cos;
}

@function pow($number, $exp) {
    $value: 1;
    @if $exp > 0 {
        @for $i from 1 through $exp {
            $value: $value * $number;
        }
    }
    @else if $exp < 0 {
        @for $i from 1 through -$exp {
            $value: $value / $number;
        }
    }
    @return $value;
}

@function long-shadow($direction, $length, $color, $fade: false, $shadow-count: 100) {
    $shadows: ();
    $conversion-map: ( to top: 180deg, to top right: 135deg, to right top: 135deg, to right: 90deg, to bottom right: 45deg, to right bottom: 45deg, to bottom: 0deg, to bottom left: 315deg, to left bottom: 315deg, to left: 270deg, to left top: 225deg, to top left: 225deg);
    @if map-has-key($conversion-map, $direction) {
        $direction: map-get($conversion-map, $direction);
    }
    @for $i from 1 through $shadow-count {
        $current-step: ($i * $length / $shadow-count);
        $current-color: if(not $fade, $color, if(type-of($fade)=='color', mix($fade, $color, ($i / $shadow-count * 100)), rgba($color, 1 - $i / $shadow-count)));
        $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
    }
    @return $shadows;
}

// Examples
// .foo {
//   text-shadow: long-shadow(
//     // Shadow should have an angle of 42 degrees
//     $direction: 42deg, 
//     // Shadow should be contain within a 100x100 box
//     $length: 100px, 
//     // Shadow should start this color
//     $color: #16a085,
//     // To finish this color
//     $fade: #1abc9c
//   ); 
// }
