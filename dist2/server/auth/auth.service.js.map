{"version":3,"sources":["auth/auth.service.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;wBAEQ,UAAU;;;;iCACZ,uBAAuB;;;;4BAC1B,cAAc;;;;0BACP,aAAa;;;;oCAChB,uBAAuB;;;;gCAC1B,wBAAwB;;;;AAEzC,IAAI,WAAW,GAAG,6BAAW;AACzB,UAAM,EAAE,+BAAO,OAAO,CAAC,OAAO;CACjC,CAAC,CAAC;;;;;;;AAMI,SAAS,eAAe,GAAG;AAC9B,WAAO,wCAAS;;KAEX,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;;AAE1B,YAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE;AACvD,eAAG,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC;SAClE;AACD,mBAAW,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAC/B,CAAC;;KAED,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC1B,sCAAK,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAC3B,IAAI,CAAC,UAAA,IAAI,EAAI;AACV,gBAAI,CAAC,IAAI,EAAE;AACP,uBAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;aAChC;AACD,eAAG,CAAC,IAAI,GAAG,IAAI,CAAC;AAChB,gBAAI,EAAE,CAAC;SACV,CAAC,SACI,CAAC,UAAA,GAAG;mBAAI,IAAI,CAAC,GAAG,CAAC;SAAA,CAAC,CAAC;KAChC,CAAC,CAAC;CACV;;;;;;AAKM,SAAS,OAAO,CAAC,YAAY,EAAE;AAClC,QAAI,CAAC,YAAY,EAAE;AACf,cAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KACpD;;AAED,WAAO,wCAAS,CACX,GAAG,CAAC,eAAe,EAAE,CAAC,CACtB,GAAG,CAAC,SAAS,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC5C,YAAI,+BAAO,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IACvC,+BAAO,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;AACxC,gBAAI,EAAE,CAAC;SACV,MAAM;AACH,eAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACrC;KACJ,CAAC,CAAC;CACV;;;;;;AAKM,SAAS,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE;AAChC,WAAO,0BAAI,IAAI,CAAC;AACZ,WAAG,EAAE,EAAE;AACP,YAAI,EAAE,IAAI;KACb,EAAE,+BAAO,OAAO,CAAC,OAAO,EAAE;AACvB,iBAAS,EAAE,+BAAO,OAAO,CAAC,UAAU;KACvC,CAAC,CAAC;CACN;;;;;;AAKM,SAAS,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AACrC,QAAI,CAAC,GAAG,CAAC,IAAI,EAAE;AACX,eAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;KACzF;AACD,QAAI,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnD,OAAG,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAC3B,OAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;CACrB","file":"auth/auth.service.js","sourcesContent":["'use strict';\n\nimport passport from 'passport';\nimport config from '../config/environment';\nimport jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport compose from 'composable-middleware';\nimport User from '../api/user/user.model';\n\nvar validateJwt = expressJwt({\n    secret: config.secrets.session\n});\n\n/**\n * Attaches the user object to the request if authenticated\n * Otherwise returns 403\n */\nexport function isAuthenticated() {\n    return compose()\n        // Validate jwt\n        .use(function(req, res, next) {\n            // allow access_token to be passed through query parameter as well\n            if (req.query && req.query.hasOwnProperty('access_token')) {\n                req.headers.authorization = 'Bearer ' + req.query.access_token;\n            }\n            validateJwt(req, res, next);\n        })\n        // Attach user to request\n        .use(function(req, res, next) {\n            User.findByIdAsync(req.user._id)\n                .then(user => {\n                    if (!user) {\n                        return res.status(401).end();\n                    }\n                    req.user = user;\n                    next();\n                })\n                .catch(err => next(err));\n        });\n}\n\n/**\n * Checks if the user role meets the minimum requirements of the route\n */\nexport function hasRole(roleRequired) {\n    if (!roleRequired) {\n        throw new Error('Required role needs to be set');\n    }\n\n    return compose()\n        .use(isAuthenticated())\n        .use(function meetsRequirements(req, res, next) {\n            if (config.userRoles.indexOf(req.user.role) >=\n                config.userRoles.indexOf(roleRequired)) {\n                next();\n            } else {\n                res.status(403).send('Forbidden');\n            }\n        });\n}\n\n/**\n * Returns a jwt token signed by the app secret\n */\nexport function signToken(id, role) {\n    return jwt.sign({\n        _id: id,\n        role: role\n    }, config.secrets.session, {\n        expiresIn: config.session.expiration // expressed in seconds or an string describing a time span rauchg/ms. Eg: 60, \"2 days\", \"10h\", \"7d\"\n    });\n}\n\n/**\n * Set token cookie directly for oAuth strategies\n */\nexport function setTokenCookie(req, res) {\n    if (!req.user) {\n        return res.status(404).send('It looks like you aren\\'t logged in, please try again.');\n    }\n    var token = signToken(req.user._id, req.user.role);\n    res.cookie('token', token);\n    res.redirect('/');\n}\n"],"sourceRoot":"/source/"}