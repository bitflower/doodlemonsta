{"version":3,"sources":["auth/local/passport.js"],"names":[],"mappings":";;;;;;;;;wBAAqB,UAAU;;;;6BACW,gBAAgB;;AAE1D,SAAS,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;;;;AAIvD,QAAI,CAAC,YAAY,CAAC;AACV,YAAI,EAAE,QAAQ;KACjB,CAAC,CACD,IAAI,CAAC,UAAA,IAAI,EAAI;;;;AAIV,YAAI,CAAC,IAAI,EAAE;AACP,mBAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE;AACrB,uBAAO,EAAE,kCAAkC;aAC9C,CAAC,CAAC;SACN;AACD,YAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAS,SAAS,EAAE,aAAa,EAAE;;;;;;;AAO3D,gBAAI,SAAS,EAAE;AACX,uBAAO,IAAI,CAAC,SAAS,CAAC,CAAC;aAC1B;AACD,gBAAI,CAAC,aAAa,EAAE;AAChB,uBAAO,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,CAAC;aAC1E,MAAM;;;AAGH,oBAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;AAC5B,oBAAI,CAAC,IAAI,CAAC,UAAS,GAAG,EAAE,KAAK,EAAE;AAC3B,wBAAI,GAAG,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC1B,2BAAO,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBAC5B,CAAC,CAAC;aAEN;SACJ,CAAC,CAAC;KACN,CAAC,SACI,CAAC,UAAA,GAAG;eAAI,IAAI,CAAC,GAAG,CAAC;KAAA,CAAC,CAAC;CAChC;;AAEM,SAAS,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE;;AAEhC,0BAAS,GAAG,CAAC,4BAAkB;AAC3B,qBAAa,EAAE,UAAU;AACzB,qBAAa,EAAE,UAAU;KAC5B,EAAE,UAAS,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE;;AAElC,eAAO,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;KAC5D,CAAC,CAAC,CAAC;CACP","file":"auth/local/passport.js","sourcesContent":["import passport from 'passport';\nimport { Strategy as LocalStrategy } from 'passport-local';\n\nfunction localAuthenticate(User, username, password, done) {\n\n    // console.log('Searching user: ' + username);\n\n    User.findOneAsync({\n            name: username //.toLowerCase()\n        })\n        .then(user => {\n\n            // console.log('Found user: ', user); // OK !\n\n            if (!user) {\n                return done(null, false, {\n                    message: 'This username is not registered.'\n                });\n            }\n            user.authenticate(password, function(authError, authenticated) {\n\n                // console.log('user.authenticate', {\n                //     authError: authError,\n                //     authenticated: authenticated\n                // }); // OK!\n\n                if (authError) {\n                    return done(authError);\n                }\n                if (!authenticated) {\n                    return done(null, false, { message: 'This password is not correct.' });\n                } else {\n\n                    // Set last login date\n                    user.lastLogin = new Date();\n                    user.save(function(err, _user) {\n                        if (err) return done(err);\n                        return done(null, _user);\n                    });\n                    \n                }\n            });\n        })\n        .catch(err => done(err));\n}\n\nexport function setup(User, config) {\n    // console.log('Setup passport local strategy'); // OK!\n    passport.use(new LocalStrategy({\n        usernameField: 'username', // The field in the request body representing the username\n        passwordField: 'password' // this is the virtual field on the model\n    }, function(username, password, done) {\n        // console.log('Passport localAuthenticate function');\n        return localAuthenticate(User, username, password, done);\n    }));\n}\n"],"sourceRoot":"/source/"}